{"timestamp":"1686785464","author":"GnomedDev","description":"Closing this PR as it is no longer relevant and unmergable due to conflicts and large diff. These changes will be rewritten into smaller PRs (805, 807, 832)."}

{"timestamp":"1680505014","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/egg/core/eggTaskThread.hh","range":{"startLine":13}},"description":"This change doesn't make any sense. Taking an arbitrary `void*` as user data is standard practice in C code. `TaskThread` isn't valid for any arbitrary type of `arg`. If you want a safe interface, make a wrapper type or freestanding function."}

{"timestamp":"1680505351","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":98}},"description":"Ideally we wouldn't crash from an invalid .ini file. Not a blocker but perhaps we could adapt this function to return `std::expected\u003cu32, FixedString\u003c32\u003e\u003e` or such? "}

{"timestamp":"1680505410","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":134}},"description":"`auto [section, key, value] = property;` below maybe?"}

{"timestamp":"1680505529","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":377}},"description":"Do we not have an enum for this?"}

{"timestamp":"1680505587","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"I believe this is invalid if included in multiple files. You can fix that by making it `constexpr`, which may also allow for some additional optimization."}

{"timestamp":"1680514685","author":"GnomedDev","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":98}},"description":"What would the user facing behavior you would like to see? If one of the pack files is invalid for now, and we didn't panic, it would need some UI code to implement a dialog or something, which should probably be done in a follow up PR."}

{"timestamp":"1680514734","author":"GnomedDev","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/egg/core/eggTaskThread.hh","range":{"startLine":13}},"description":"Ah yes, I did this while debugging issues and never reverted it, I'll revert now."}

{"timestamp":"1680514811","author":"GnomedDev","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"It being in multiple files wouldn't be desired behavior anyway, and this isn't performance sensitive enough to give up the error."}

{"timestamp":"1680514943","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"If you are not allowed to `#include` the file, then it is not a header."}

{"timestamp":"1680515084","author":"GnomedDev","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"It shouldn't be a header anyway, this is just making up for the fact C++ doesn't have a form of include_str."}

{"timestamp":"1680534213","author":"GnomedDev","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":134}},"description":"This doesn't seem to compile?"}

{"timestamp":"1680579472","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":134}},"description":"`*property`*"}

{"timestamp":"1680579545","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"Probably better to make it either `constexpr` or `inline` so it's a valid header for now. If we want to avoid duplicate bodies being generated we can put it in its own .cc file later, but I think the linker will merge them anyway since it's const."}

{"timestamp":"1680579613","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":98}},"description":"Fair"}

{"timestamp":"1680579826","author":"riidefi","location":{"commit":"4ea3715f3f6cb630d500dde9fc93761ac766ab04","path":"payload/sp/FixedString.hh","range":{"startLine":61}},"description":"m_len = ..."}

{"timestamp":"1680656888","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/game/ui/GhostManagerPage.cc","range":{"startLine":39}},"description":"Stray semicolons?"}

{"timestamp":"1680656926","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/game/ui/Section.cc","range":{"startLine":196}},"description":"Print both hex \u0026 decimal ideally"}

{"timestamp":"1680656941","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/game/ui/Section.cc","range":{"startLine":229}},"description":"Ditto"}

{"timestamp":"1680656999","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/sp/FixedString.hh","range":{"startLine":64}},"description":"Optional: Add constructor from std::wstring_view and conversion to std::wstring_view (to match API of FixedString)"}

{"timestamp":"1680657016","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/sp/ShaUtil.cc","range":{"startLine":6}},"description":"Probably better to return a FixedString here?"}

{"timestamp":"1680657065","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/sp/TrackPackManager.cc","range":{"startLine":95}},"description":"Move to ShaUtil?"}
