{"timestamp":"1686785464","author":"GnomedDev","description":"Closing this PR as it is no longer relevant and unmergable due to conflicts and large diff. These changes will be rewritten into smaller PRs (805, 807, 832)."}

{"timestamp":"1680505014","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/egg/core/eggTaskThread.hh","range":{"startLine":13}},"description":"This change doesn't make any sense. Taking an arbitrary `void*` as user data is standard practice in C code. `TaskThread` isn't valid for any arbitrary type of `arg`. If you want a safe interface, make a wrapper type or freestanding function."}

{"timestamp":"1680505351","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":98}},"description":"Ideally we wouldn't crash from an invalid .ini file. Not a blocker but perhaps we could adapt this function to return `std::expected\u003cu32, FixedString\u003c32\u003e\u003e` or such? "}

{"timestamp":"1680505410","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":134}},"description":"`auto [section, key, value] = property;` below maybe?"}

{"timestamp":"1680505529","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":377}},"description":"Do we not have an enum for this?"}

{"timestamp":"1680505587","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"I believe this is invalid if included in multiple files. You can fix that by making it `constexpr`, which may also allow for some additional optimization."}

{"timestamp":"1680514685","author":"GnomedDev","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":98}},"description":"What would the user facing behavior you would like to see? If one of the pack files is invalid for now, and we didn't panic, it would need some UI code to implement a dialog or something, which should probably be done in a follow up PR."}

{"timestamp":"1680514734","author":"GnomedDev","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/egg/core/eggTaskThread.hh","range":{"startLine":13}},"description":"Ah yes, I did this while debugging issues and never reverted it, I'll revert now."}

{"timestamp":"1680514811","author":"GnomedDev","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"It being in multiple files wouldn't be desired behavior anyway, and this isn't performance sensitive enough to give up the error."}

{"timestamp":"1680514943","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"If you are not allowed to `#include` the file, then it is not a header."}

{"timestamp":"1680515084","author":"GnomedDev","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"It shouldn't be a header anyway, this is just making up for the fact C++ doesn't have a form of include_str."}

{"timestamp":"1680534213","author":"GnomedDev","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":134}},"description":"This doesn't seem to compile?"}

{"timestamp":"1680579472","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":134}},"description":"`*property`*"}

{"timestamp":"1680579545","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"Probably better to make it either `constexpr` or `inline` so it's a valid header for now. If we want to avoid duplicate bodies being generated we can put it in its own .cc file later, but I think the linker will merge them anyway since it's const."}

{"timestamp":"1680579613","author":"riidefi","location":{"commit":"4b87689ea31866bc052f7f5aa8b6d52bec3c2a2c","path":"payload/sp/TrackPackManager.cc","range":{"startLine":98}},"description":"Fair"}

{"timestamp":"1680579826","author":"riidefi","location":{"commit":"4ea3715f3f6cb630d500dde9fc93761ac766ab04","path":"payload/sp/FixedString.hh","range":{"startLine":61}},"description":"m_len = ..."}

{"timestamp":"1680656888","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/game/ui/GhostManagerPage.cc","range":{"startLine":39}},"description":"Stray semicolons?"}

{"timestamp":"1680656926","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/game/ui/Section.cc","range":{"startLine":196}},"description":"Print both hex \u0026 decimal ideally"}

{"timestamp":"1680656941","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/game/ui/Section.cc","range":{"startLine":229}},"description":"Ditto"}

{"timestamp":"1680656999","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/sp/FixedString.hh","range":{"startLine":64}},"description":"Optional: Add constructor from std::wstring_view and conversion to std::wstring_view (to match API of FixedString)"}

{"timestamp":"1680657016","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/sp/ShaUtil.cc","range":{"startLine":6}},"description":"Probably better to return a FixedString here?"}

{"timestamp":"1680657065","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/sp/TrackPackManager.cc","range":{"startLine":95}},"description":"Move to ShaUtil?"}

{"timestamp":"1680657099","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/sp/TrackPackManager.cc","range":{"startLine":151}},"description":"TRY should clean this up a bit"}

{"timestamp":"1680657171","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/sp/TrackPackManager.cc","range":{"startLine":293}},"description":"See this is why I'm not a huge fan of constructors in C++ turning every type into an optional type."}

{"timestamp":"1680694532","author":"GnomedDev","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/sp/ShaUtil.cc","range":{"startLine":6}},"description":"Doesn't FixedString have capacity and length? Because it will always be the same amount of chars, this is simpler imo."}

{"timestamp":"1680745223","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.cc","range":{"startLine":128}},"description":"`std::string_view` need not be null-terminated, so we should be able to avoid a temporary buffer (like `buf`) entirely."}

{"timestamp":"1680745272","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.cc","range":{"startLine":182}},"description":"Usually more idiomatic to use `.empty()` instead of `.size() == 0`"}

{"timestamp":"1680745499","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.cc","range":{"startLine":337}},"description":"ditto"}

{"timestamp":"1680745515","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.cc","range":{"startLine":367}},"description":"`auto *raceConfig`"}

{"timestamp":"1680745679","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.hh","range":{"startLine":36}},"description":"Probably makes sense to put `name` last for cache reasons?"}

{"timestamp":"1680745767","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.hh","range":{"startLine":121}},"description":"std::unique_ptr\u003cWFixedString\u003c64\u003e\u003e maybe?"}

{"timestamp":"1680745801","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/ShaUtil.cc","range":{"startLine":12}},"description":"Can you adapt to use `snprintf`? Wouldn't mind completely blacklisting this function"}

{"timestamp":"1680746071","author":"riidefi","location":{"commit":"a2a7035575f22bc30ab835e1d964f5323c7910a6","path":"payload/sp/ShaUtil.cc","range":{"startLine":6}},"description":"That's true but it seems unintuitive to see `.data()` be valid for a cstr later. If this isn't performance critical, it'd probably be a lot more clear to suffer the 4 byte penalty and use a `FixedString`."}

{"timestamp":"1680747000","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.cc","range":{"startLine":201}},"description":"If you `std::sort` this array earlier, you can use `std::lower_bound` to perform a binary search"}

{"timestamp":"1680747020","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.cc","range":{"startLine":201}},"description":"(optional)"}

{"timestamp":"1680747505","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.cc","range":{"startLine":201}},"description":"Probably just slower here since you reload the ini files every race (?)"}

{"timestamp":"1680784723","author":"GnomedDev","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.cc","range":{"startLine":201}},"description":"I reload every time the pack selection page is initialised, or every race when capturing thumbnails"}

{"timestamp":"1680791004","author":"GnomedDev","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.hh","range":{"startLine":121}},"description":"Wouldn't `unique_ptr` heap allocate the `WFixedString`? That wouldn't work as we need to keep all this data across the scene boundary (heap cleared)."}

{"timestamp":"1680802272","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.hh","range":{"startLine":121}},"description":"I suppose you could allocate in the System heap. It is probably better to just extend the structure and place TrackPackManager at the end (allocate more memory)."}

{"timestamp":"1680802573","author":"GnomedDev","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.hh","range":{"startLine":121}},"description":"The system heap stays allocated? Could I put `TrackPackManager` in there and get rid of `TrackPackInfo` entirely?"}

{"timestamp":"1680803005","author":"riidefi","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.hh","range":{"startLine":121}},"description":"It's better to keep the data in MEM2 and extend the structure you insert TrackPackManager into"}

{"timestamp":"1680915113","author":"GnomedDev","location":{"commit":"539f83402be1611d9c32d6cf9b48bdd7bb4e592e","path":"payload/sp/TrackPackManager.hh","range":{"startLine":36}},"description":"Hmm? That seems like a micro optimization and even then, how would that be better for cache reasons?"}

{"timestamp":"1681091923","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":12}},"description":"Unused include. Maybe cherry-pick this file into its own PR?"}

{"timestamp":"1681091966","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":48}},"description":"Actually, for both `FixedString\u003cN\u003e` classes, does it make sense to have `N-1` usable characters?"}

{"timestamp":"1681092025","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":56}},"description":"Probably better as a static function like `fromUTF8`, possibly returning an optional value down the road?"}

{"timestamp":"1681092154","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"`#pragma once`"}

{"timestamp":"1681092240","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/game/system/MultiDvdArchive.hh","range":{"startLine":27}},"description":"Maybe also pull this into its own PR as a bugfix?"}

{"timestamp":"1681092486","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/game/ui/SingleTopPage.cc","range":{"startLine":119}},"description":"`== SP::TrackGameMode::Coin` / similar for all of these is preferable as it handles flagsets too and it's not obvious `::None` is 0."}

{"timestamp":"1681128579","author":"GnomedDev","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":12}},"description":"I have already messed this branch up with the first couple of commits, I don't want to push git any further to avoid having to merge it down into one commit."}

{"timestamp":"1681128592","author":"GnomedDev","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":48}},"description":"Not in scope for this PR"}

{"timestamp":"1681128656","author":"GnomedDev","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"I thought you said constexpr allows it be included multiple times?"}

{"timestamp":"1681128715","author":"GnomedDev","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/game/system/MultiDvdArchive.hh","range":{"startLine":27}},"description":"It isn't a bugfix to upstream, as it isn't used in upstream. Just seems like mindless busywork."}

{"timestamp":"1681146551","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/vanillaTracks.hh","range":{"startLine":2}},"description":"All other header files in the repo begin with `#pragma once#. This one isn't special.\r\n\r\n`constexpr` makes the definition weak which prevents linker ODR-violations if the file is included in multiple translation units. It's still not valid to multiply define the same weak symbol within singular translation unit."}

{"timestamp":"1681146694","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":48}},"description":"We should clearly communicate our maximum size for fields in the `.ini`. In this case, when you wrote `FixedString\u003c64\u003e`, perhaps you meant `FixedString\u003c65\u003e` given this behavior?"}

{"timestamp":"1681146784","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":12}},"description":"This utility is useful beyond this PR (which cannot get merged for a while)."}

{"timestamp":"1681147928","author":"GnomedDev","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":48}},"description":"I wrote 64 because it's a nice number, and hoped it's divisibility would allow for SIMD/loop unrolling stuff."}

{"timestamp":"1681149003","author":"GnomedDev","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":12}},"description":"Okay?"}

{"timestamp":"1681150459","author":"GnomedDev","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/game/ui/SingleTopPage.cc","range":{"startLine":119}},"description":"Just tested, and in fact, `7 == 4` does not return True!"}

{"timestamp":"1681151448","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":12}},"description":"Therefore there is merit to moving this to its own PR and reducing the adventurous scope of this one."}

{"timestamp":"1681151982","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/sp/FixedString.hh","range":{"startLine":48}},"description":"Gotcha. We should then enforce a limit of 63/whatever in the python wiimmdb parser."}

{"timestamp":"1681152297","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/game/ui/SingleTopPage.cc","range":{"startLine":119}},"description":"\u003e Just tested, and in fact, 7 == 4 does not return True!\r\n\r\nKnock it off with the attitude. A flagset denotes a value like 0b0110 where ((0b0110 \u0026 0b0110) != 0) == ((0b0110 \u0026 0b0100) != 0) == ((0b0110 \u0026 0b0010) != 0)."}

{"timestamp":"1681152994","author":"riidefi","location":{"commit":"d187fe7d7fa1747ccc2a2cf90f64d27c2a611290","path":"payload/game/ui/SingleTopPage.cc","range":{"startLine":119}},"description":"Here is some testing:\r\n```py\r\n\u003e\u003e\u003e bool(7 \u0026 4)\r\nTrue\r\n\u003e\u003e\u003e bool(7 \u0026 2)\r\nTrue\r\n\u003e\u003e\u003e bool(7 \u0026 1)\r\nTrue\r\n```"}
