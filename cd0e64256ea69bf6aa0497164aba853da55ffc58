{"timestamp":"1686871546","author":"riidefi","description":"I think this is fine, but the annoying thing with C++ is that a std::array reference isn't like a Rust arrayref, so this code sort of requires that everyone is locked into the Sha1 struct. Perhaps we could provide two aliases? i.e.\r\n```cpp\r\nusing Sha1 = std::array\u003cu8, 0x14\u003e;\r\nusing Sha1Ref = std::span\u003cconst u8, 0x14\u003e;\r\n```"}

{"timestamp":"1686871593","author":"GnomedDev","description":"Being locked into the `Sha1` struct is mostly the point, for type safety."}

{"timestamp":"1686872695","author":"riidefi","description":"Okay--while I personally think this is quite brittle and odd for a function on a read-only span of 20 bytes to require the programmer to memcpy into a specific structure (when reading from a file is a use-case), I can agree that the security footguns of the current approach (with a raw pointer) are worse. I've approved this change."}

{"timestamp":"1688515040","author":"GnomedDev","description":"Solved conflicts and header ordering issues."}

{"timestamp":"1688513886","author":"vabold","location":{"commit":"2d7e4720bcad7c099a8bac7ef76ba466e3f2b042","path":"payload/sp/ShaUtil.hh","range":{"startLine":7}},"description":"```suggestion\r\n#include \u003cexpected\u003e\r\n#include \u003cstring_view\u003e\r\n\r\n#include \u003cCommon.hh\u003e\r\n```"}

{"timestamp":"1688513962","author":"vabold","location":{"commit":"2d7e4720bcad7c099a8bac7ef76ba466e3f2b042","path":"payload/sp/ShaUtil.cc","range":{"startLine":3}},"description":"While you're fixing includes:\r\n```suggestion\r\n#include \"ShaUtil.hh\"\r\n\r\n#include \u003cvendor/libhydrogen/hydrogen.h\u003e\r\n```"}
